#!/bin/bash -efu
# SPDX-License-Identifier: GPL-2.0

PROG="${0##*/}"
PROGCMD="${PROG#git-}"

[ -t 1 ] &&
	color=always ||
	color=none

message()
{
	printf >&2 '%s: %s\n' "$PROG" "$*"
}

fatal()
{
	message "$*"
	exit 1
}

workdir=
create_workdir()
{
	workdir="$(git rev-parse --absolute-git-dir)/$PROGCMD" ||
		fatal "unable to find git directory"
	mkdir -p -- "$workdir"
}

cleanup_handler()
{
	trap - EXIT
	[ -z "$workdir" ] ||
		rm -rf -- "$workdir" ||:
	exit "$1"
}

exit_handler()   { cleanup_handler $?; }
signal_handler() { cleanup_handler  1; }

option_b()
{
	for OPTNAME in $1; do
		if [ -z "${2##$OPTNAME}" ]; then
			OPTSHIFT=1
			return 0
		fi
	done
	return 1
}

option_s()
{
	for OPTNAME in $1; do
		if [ -z "${2##$OPTNAME}" ]; then
			[ "$#" -gt 2 ] ||
				fatal "argument required for $2 option"
			OPTVALUE="$3"
			OPTSHIFT=2
		elif [ -z "${2##$OPTNAME=*}" ]; then
			OPTVALUE="${2#$OPTNAME=}"
			OPTSHIFT=1
		fi
		[ -z "${OPTSHIFT-}" ] ||
			return 0
	done
	return 1
}

readonly P_HEAD=0 P_FULL=1 P_NAME=2 P_TYPE=3 P_VERS=4

# in: refs/heads/patchset/sysctl-ipc/v1.0
# out: "refs/heads/patchset/sysctl-ipc/v1.0" "patchset/sysctl-ipc/v1.0" "sysctl-ipc" "v" "1.0"
parse_refname()
{
	local __parse_refname

	if [ "$#" -eq 1 ] || [ -z "${2-}" ]; then
		__parse_refname="$(git branch --show-current --format='%(refname)')" ||
			fatal "unable to obtain current branch name"
		set -- "$1" "refs/heads/$__parse_refname"
	fi

	declare -n "__parse_refname=$1"

	if [[ "$2" =~ ^(refs/)?(heads/)?(patchset/([^/]+)(/([av])([0-9]+.[0-9]+))?) ]]; then
		set -- "$2" "${BASH_REMATCH[3]}"          "${BASH_REMATCH[4]}" "${BASH_REMATCH[6]-}" "${BASH_REMATCH[7]-}"
	elif [[ "$2" =~ ^(([^/]+)(/([av])([0-9]+.[0-9]+))?) ]]; then
		set -- "$2" "patchset/${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[4]-}" "${BASH_REMATCH[5]-}"
	else
		fatal "branch is not a patchset: $2"
	fi

	[ -n "$(git for-each-ref --format=1 "refs/heads/patchset/${3}/${4-[av]}${5-[0-9]*}")" ] ||
		fatal "nothing matches the specified refspec: $1"

	__parse_refname=( [$P_HEAD]="refs/heads/$2" [$P_FULL]="$2" [$P_NAME]="$3" [$P_TYPE]="$4" [$P_VERS]="$5" )
}

builtin_cat()
{
	local s eof=
	while [ -z "$eof" ]; do
		read -r -N 1 s || eof=1
		printf '%s' "$s"
	done
}

in_array()
{
	local e; e="$1"; shift
	while [ "$#" -gt 0 ]; do
		[ "$1" != "$e" ] || return 0
		shift
	done
	return 1
}

get_pager()
{
	local __get_pager
	__get_pager="$(git config --get patchset.pager)" ||
		__get_pager="$(git config --get core.pager)" ||
		__get_pager="less"
	eval "$1=\"\$__get_pager\""
}

mergecommit_for()
{
	local __mergecommit_for=''
	__mergecommit_for()
	{
		local name merge remote

		name="${1#refs/}"
		name="${name#heads/}"

		if ! merge="$(git config "branch.$name.merge")"; then
			message "not found upstream for branch: $name"
			message "Use \`git branch -u <upstream> $name\` to set upstream for branch."
			return 1
		fi

		if ! remote="$(git config "branch.$name.remote")"; then
			message "unable to find \"branch.$name.remote\"."
			return 1
		fi

		case "$remote" in
			'.')
				;;
			*)
				merge="${merge#refs/}"
				merge="${merge#heads/}"
				merge="refs/remotes/$remote/$merge"
				;;
		esac

		__mergecommit_for="$(git rev-parse --short "$merge")" || {
			message "unable to resolve reference: $merge"
			return 1
		}
	}
	__mergecommit_for "$2" ||
		return
	eval "$1=\"\$__mergecommit_for\""
}

basecommit_for()
{
	local __basecommit_for=''
	__basecommit_for()
	{
		local name merge

		name="${1#refs/}"
		name="${name#heads/}"

		if merge="$(git rev-parse --short "refs/tags/$name/cover" 2>/dev/null)"; then
			__basecommit_for="$merge"
			return
		fi

		mergecommit_for __basecommit_for "$1"
	}

	__basecommit_for "$2" ||
		return
	eval "$1=\"\$__basecommit_for\""
}

foreach_ref()
{
	git for-each-ref --format='%(if)%(HEAD)%(then)*%(else)-%(end) %(objectname:short) %(refname:lstrip=2)' "refs/heads/$1" |
		sort -V -t\  -k3,3 |
	while [ -z "${eof-}" ]; do
		read -r _0 _1 _2 || eof=1
		"$2" "${_0}" "${_1}" "${_2}" "${_2%/[av]*}" || break
	done
}

get_subject_prefix()
{
	git config --get "branch.$1.subject-prefix" |
		sed -e 's#[[:space:]]\+# #g'
}

update_description_from_tag()
{
	git rev-parse --short "refs/tags/$1/cover" &>/dev/null ||
		return 0

	create_workdir

	git cat-file tag "refs/tags/$1/cover" |
		sed -e '1,/^$/d' >"$workdir"/BRANCH_DESCRIPTION

	GIT_EDITOR="mv -f -- '$workdir/BRANCH_DESCRIPTION'" \
		git branch --edit-description "$1" ||
		fatal "unable to update branch description for $1"
}

update_tag_from_description()
{
	local commit

	mergecommit_for commit "$1" ||
		return 0

	git config "branch.$1.description" |
		git tag --annotate --file=- --force "$1/cover" "$commit"
}

update_tag()
{
	local merge tag

	if tag="$(git rev-parse --verify "refs/tags/$1/cover^{}" 2>/dev/null)"; then
		mergecommit_for merge "$1" ||
			return 0

		[ "$tag" != "$merge" ] ||
			return 0

		message "it looks like the branch tag doesn't point to the beginning of patchset (rebase happened ?)"
	fi

	update_tag_from_description "$1"
}

get_thread_id_from_files()
{
	if [ -s "$1" ]; then
		sed -ne '1,/^$/ { s/^Message-Id:[[:space:]]\+//p }' "$1"
		return 0
	fi
	return 1
}

help_create()
{
	case "$1" in
		usage) printf 'create [options] <newname> [<start-point>]\n'
			;;
		descr) builtin_cat <<-EOF
			Creates branch for a new patchset. The new branch will be
			created with v1 version. the version and cover can be
			overwritten if commits are imported from mbox file.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  --no-edit-cover             do not offer to edit cover.
			  -S, --start-point=COMMIT    specifying a COMMIT allows you to create a branch
			                              based on some other point in history than where
			                              HEAD currently points.
			  -m, --use-local-mbox=FILE   process FILE mbox to import patchset.
			  -h, --help                  show this text and exit.
			EOF
			;;
	esac
}

cmd_create()
{
	local args branchname='' startpoint='' mbox='' no_edit_cover='' newver='v1.0'

	args=()
	while [ "$#" -gt 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help create
			return
		elif option_b '--no-edit-cover' "$@"; then
			no_edit_cover=1
		elif option_s '-S --start-point' "$@"; then
			startpoint="$OPTVALUE"
		elif option_s '-m --use-local-mbox' "$@"; then
			mbox="$OPTVALUE"
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}"

	[ "$#" != 0 ] ||
		fatal "patchset name required"

	branchname="$1"
	shift

	if [ "$#" != 0 ]; then
		[ -z "$startpoint" ] ||
			fatal "start-point already specified via options"
		startpoint="$1"
		shift
	fi

	[ "$#" = 0 ] ||
		fatal "too many arguments"

	branchname="${branchname#/}"
	branchname="${branchname%/}"

	[ -n "$branchname" ] ||
		fatal "empty branch name is not allowed"

	create_workdir

	printf >"$workdir"/BRANCH_DESCRIPTION '%s\n\n' \
		'*** SUBJECT HERE ***' \
		'*** PATCHSET DESCRIPTION HERE ***' \
		'---'

	if [ -s "$mbox" ]; then
		type -p b4 >/dev/null ||
			fatal "the b4 utility is required to import mbox"

		b4 -q am -o "$workdir" -m "$mbox" ||
			fatal "unable to create an mbox file that is ready to git-am"

		local fn

		fn="$(set +f && echo "$workdir"/*.mbx)"
		[ -f "$fn" ] ||
			fatal "unable to find created mbox"

		mbox="$fn"

		if [[ "${fn##*/}" =~ ^(v[0-9]+)_ ]]; then
			newver="${BASH_REMATCH[1]}.0"
		fi

		fn="$(set +f && echo "$workdir"/*.cover)"
		if [ -s "$fn" ]; then
			git mailinfo "$fn.msg" /dev/null < "$fn" > "$fn.info"
			{
				sed -n -e 's/^Subject:[[:space:]]\+//p' "$fn.info"
				printf '\n'
				builtin_cat < "$fn.msg"
			} >"$workdir"/BRANCH_DESCRIPTION
		fi
	fi

	git switch \
		--create "patchset/$branchname/$newver" \
		--track ${startpoint:+"$startpoint"} ||
		fatal "unable to create new branch: patchset/$branchname/$newver"

	[ -z "$mbox" ] ||
		git am -- "$mbox"

	GIT_EDITOR="mv -f -- '$workdir/BRANCH_DESCRIPTION'" \
		git branch --edit-description ||
		fatal "unable to write branch description"

	[ -n "$mbox" ] || [ -n "$no_edit_cover" ] ||
		git branch --edit-description ||
			fatal "unable to change description"
	update_tag_from_description "patchset/$branchname/$newver"

	message "new patchset created: patchset/$branchname/$newver"
}

help_remove()
{
	case "$1" in
		usage) printf 'remove <patchset>\n'
			;;
		descr) builtin_cat <<-EOF
			Permanently remove patchset version.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  -a, --all       remove all patchset versions.
			  -h, --help      show this text and exit.
			EOF
			;;
	esac
}

cmd_remove()
{
	local args patchset current remove_all='' cant_remove=''

	args=()

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help remove
			return
		elif option_b '-a --all' "$@"; then
			remove_all=1
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}" "$@"

	parse_refname patchset "$1"
	shift

	[ "$#" -eq 0 ] ||
		fatal "too many arguments"

	parse_refname current

	local filter=''

	if [ -n "$remove_all" ]; then
		[ "${current[$P_NAME]}" != "${patchset[$P_NAME]}" ] ||
			cant_remove=1
		filter="patchset/${patchset[$P_NAME]}/"
	elif [ "${current[$P_FULL]}" = "${patchset[$P_FULL]}" ]; then
		cant_remove=1
	else
		filter="${patchset[$P_FULL]}"
	fi

	[ -z "$cant_remove" ] ||
		fatal "cowardly refuse to delete the current branch."

	_()
	{
		local mark="$1" objectname="$2" branchname="$3" cur_patchset="$4"
		if [ -n "$branchname" ]; then
			message "removing \`$branchname' ($objectname) ..."
			git tag -d "$branchname/cover" 2>/dev/null ||:
			git branch -D "$branchname"
		fi
	}
	foreach_ref "$filter" _
}

list_recipients()
{
	local arr i handler data

	handler="$1"; shift
	data="$1"; shift

	arr=()
	while [ "$#" -gt 0 ]; do
		while read -r i; do
			if [ -n "$i" ] && ! in_array "$i" "${recipients[@]}"; then
				recipients+=("$i")
				arr+=("$i")
			fi
		done < <(git config --get-all "$1" ||:;)
		shift
	done

	for i in "${!arr[@]}"; do
		"$handler" "${#arr[@]}" "$i" "${arr[$i]}" "$data"
	done
}

describe_patchset()
{
	local branchname basecommit subject_prefix ver recipients range

	branchname="$1"; shift
	basecommit_for basecommit "$branchname" ||
		return 1

	subject_prefix="$(get_subject_prefix "$branchname")"
	subject_prefix="${subject_prefix:+$subject_prefix }PATCH"

	ver="${branchname##*/[av]}"
	ver="${ver%%.*}"

	print_field()
	{
		local sz="$1" i="$2" v="$3" f="$4"
		[ "$i" -eq 0 ] || f=""
		printf "%-${#4}s %s" "$f" "$v"
		[ "$i" -eq "$(( $sz - 1 ))" ] || printf ','
		printf '\n'
	}

	recipients=()
	range="$basecommit..refs/heads/$branchname"

	printf -- 'From %s %s\n' "$(git config --get user.email)" "$(LANG=C date -u)" ||:
	list_recipients print_field "To:" "patchset.to" "branch.$branchname.to"
	list_recipients print_field "Cc:" "patchset.cc" "branch.$branchname.cc"
	printf -- 'Subject: [%s v%s 0/%s] ' "$subject_prefix" "$ver" "$(git rev-list --count "$range")"
	git config "branch.$branchname.description" |
		sed -n -e '1,/^---$/ { /^---$/d; p }'
	printf -- '---\n\n'
	git rev-list --date-order --reverse --abbrev-commit --format=oneline "$range"
}

fetch_config_section()
{
	local branchname infile outfile inkeys outkeys inname outname

	branchname="$1"; shift
	infile="$1"; shift
	outfile="$1"; shift

	add_to_list()
	{
		local a; declare -n "a=$1"; shift
		while [ "$#" -gt 0 ]; do
			in_array "$1" "${a[@]}" || a+=("$1")
			shift
		done
	}

	list_config_keys()
	{
		eval "$1=()"
		add_to_list "$1" \
				"patchset.to" "branch.$branchname.to" \
				"patchset.cc" "branch.$branchname.cc"
		while read -r e; do
			for n in "patchset." "branch.$branchname."; do
				case "${e#$n}" in
					*.*|cc|to|description|message-id-export|message-id-sent) ;;
					*) add_to_list "$1" "$e" ;;
				esac
			done
		done < <(git config -f "$2" --name-only --list)
	}

	list_config_keys inkeys "$infile"
	list_config_keys outkeys "$outfile"

	for inname in "${inkeys[@]}"; do
		git config -f "$outfile" --unset-all "$inname" ||:
		git config -f "$infile" --get-all "$inname" 2>/dev/null | sort -u |
		while read -r value; do
			git config -f "$outfile" --add "$inname" "$value"
		done
	done

	for outname in "${outkeys[@]}"; do
		in_array "$outname" "${inkeys[@]}" ||
			git config -f "$outfile" --unset-all "$outname"
	done
}

help_config()
{
	case "$1" in
		usage) builtin_cat <<-EOF
			config [-e|--edit] [<patchset>]
			config [--global] [--to=<email> ...] [--cc=<email> ...] [--rfc] [--tag=TAG ...] [<patchset>]
			EOF
			;;
		descr) builtin_cat <<-EOF
			Changes options of the patchset. You can always change or delete To
			and Cc fields using the \`git config -e'.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  --global        add <email> globally for all patchsets.
			  --to=<email>    add a To: header to the email headers.
			  --cc=<email>    add a Cc: header to the email headers.
			  --rfc           shortcut to add RFC tag to the subject.
			  --tag=TAG       add TAG to the subject.
			  -e, --edit      open editor to change options.
			  -h, --help      show this text and exit.
			EOF
			;;
	esac
}

cmd_config()
{
	local mode=edit
	local to cc arr args patchset cfg_prefix='' do_edit='' tags

	to=(); cc=(); args=(); tags=();

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help config
			return
		elif option_b '-e --edit' "$@"; then
			do_edit=1
		elif option_b '--global' "$@"; then
			cfg_prefix="patchset"
		elif option_s '--to' "$@"; then
			to+=("$OPTVALUE")
		elif option_s '--cc' "$@"; then
			cc+=("$OPTVALUE")
		elif option_b '--rfc' "$@"; then
			tags+=("RFC")
		elif option_s '--tag' "$@"; then
			tags+=("$OPTVALUE")
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}" "$@"

	parse_refname patchset "${1-}"
	[ "$#" -eq 0 ] || shift

	[ "$#" -eq 0 ] ||
		fatal "too many arguments"

	[ -n "${patchset[$P_NAME]}" ] && [ -n "${patchset[$P_VERS]}" ] ||
		fatal "unable to parse patchset"

	if [ -n "$cfg_prefix" ]; then
		[ "$mode" != 'edit' ] ||
			fatal "options --edit and --global are mutually exclusive"
	fi

	local cc_nr=0 to_nr=0

	if [ "${#to[@]}" != 0 ] || [ "${#cc[@]}" != 0 ]; then
		arr=()
		readarray -t arr < <(
			git config --get-all "patchset.to" ||:;
			git config --get-all "patchset.cc" ||:;
		)
		if [ -z "$cfg_prefix" ]; then
			readarray -O "${#arr[@]}" -t arr < <(
				git config --get-all "branch.${patchset[$P_FULL]}.to" ||:;
				git config --get-all "branch.${patchset[$P_FULL]}.cc" ||:;
			)
			cfg_prefix="branch.${patchset[$P_FULL]}"
		fi

		add_recipient()
		{
			local field counter a
			field="$1"; shift
			counter="$1"; shift
			for a in "$@"; do
				if in_array "$a" "${arr[@]}"; then
					message "address already exists: $a"
					continue
				fi
				git config --add "$cfg_prefix.$field" "$a"
				eval "$counter=\$((\$$counter + 1))"
			done
		}

		add_recipient to to_nr "${to[@]}"
		add_recipient cc cc_nr "${cc[@]}"
	fi

	local tag_nr=0

	if [ "${#tags[@]}" != 0 ]; then
		# shellcheck disable=SC2207
		arr=( $(git config --get "branch.${patchset[$P_FULL]}.subject-prefix" ||:) )

		for a in "${tags[@]}"; do
			if in_array "$a" "${arr[@]}"; then
				message "subject tag already exists: $a"
				continue
			fi
			arr+=("$a")
			tag_nr=$(( $tag_nr + 1 ))
		done
		git config "branch.${patchset[$P_FULL]}.subject-prefix" "${arr[*]}"
	fi

	[ "${#to[@]}"   = 0 ] || message "added $to_nr new addresses to \`To' list"
	[ "${#cc[@]}"   = 0 ] || message "added $cc_nr new addresses to \`Cc' list"
	[ "${#tags[@]}" = 0 ] || message "added $tag_nr new tags to subject prefix"

	if [ -z "$do_edit" ]; then
		update_tag "${patchset[$P_FULL]}"
		[ "$#" -ne 0 ] || [ $(( ${#to[@]} + ${#cc[@]} + ${#tags[@]} )) -gt 0 ] ||
			message "there's nothing else to do"
		return 0
	fi

	local git_dir rc=0

	git_dir="$(git rev-parse --absolute-git-dir)"

	builtin_cat > "$git_dir/config.patchset.ini" <<EOF
[patchset]

[branch "${patchset[$P_FULL]}"]
#
# Available fields:
#
# - patchset.to, branch.*.to, patchset.cc, branch.*.cc
#
# Fields define the recipients for this patchset. One recipient per line. The
# field can be specified multiple times.  If you specify fields in the patchset
# section, they will be substituted for any other patchsets.
#
# - branch.*.subject-prefix
#
# Add value to the subject of each patch.
#
EOF
	(
		fetch_config_section "${patchset[$P_FULL]}" \
			"$git_dir/config" \
			"$git_dir/config.patchset.ini"

		git config \
			--file "$git_dir/config.patchset.ini" \
			--edit

		fetch_config_section "${patchset[$P_FULL]}" \
			"$git_dir/config.patchset.ini" \
			"$git_dir/config"
	) || rc=$?

	rm -f -- "$git_dir/config.patchset.ini"

	[ "$rc" = 0 ] ||
		return $rc

	update_tag "${patchset[$P_FULL]}"
}

help_list()
{
	case "$1" in
		usage) printf 'list [--all|--latest|--versions] [--archive]\n'
			;;
		descr) builtin_cat <<-EOF
			Shows a list of known patchsets. The current patchset will
			be marked with an asterisk. The list also shows the base and
			last commits as well as the number of commits.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  --all            show all versions of all patchsets.
			  --latest         show only latest versions of patchsets.
			  --versions       show all versions of current patchset.
			  --archive        show archived patchsets.
			  -T, --no-tags    hide patchset tags.
			  -h, --help       show this text and exit.
			EOF
			;;
	esac
}

cmd_list()
{
	local mode='latest' ver=v no_tags='' patchset

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help list
			return
		elif option_b '-T --no-tags' "$@"; then
			no_tags=1
		elif option_b '--all --latest --versions' "$@"; then
			mode="${OPTNAME#--}"
		elif option_b '--archive' "$@"; then
			ver=a
		else
			break
		fi
		shift "$OPTSHIFT"
	done

	local ColorRange='' ColorReset='' ColorCurrent='' ColorDefault='' ColorTag=''

	if [ "$color" = always ]; then
		ColorDefault="$(git config --get-color "" "white")"
		ColorCurrent="$(git config --get-color "" "bold")"
		ColorRange="$(  git config --get-color "" "yellow")"
		ColorTag="$(    git config --get-color "" "green")"
		ColorReset="$(  git config --get-color "" "reset")"
	fi

	case "$mode" in
		versions)
			parse_refname patchset "${1-}"
			[ "$#" -eq 0 ] || shift

			[ -z "${patchset[$P_TYPE]}" ] ||
				ver="${patchset[$P_TYPE]}"
			;;
		*)
			patchset[$P_NAME]='*'
			;;
	esac

	[ "$#" -eq 0 ] ||
		fatal "too many arguments"

	_()
	{
		local mark="$1" objectname="$2" branchname="$3" cur_patchset="$4"

		case "$mode" in
			all|versions)
				;;
			latest)
				if [ "${prev[3]-}" = "$cur_patchset" ] || [ -z "${prev[0]-}" ]; then
					prev=("$@")
					return 0
				fi
				;;
		esac

		if [ -n "${prev[0]-}" ]; then
			mark="${prev[0]}" objectname="${prev[1]}" branchname="${prev[2]}" cur_patchset="${prev[3]}"

			if ! basecommit_for basecommit "$branchname"; then
				prev=("$@")
				return 0
			fi

			[ "$mark" = '*' ] &&
				current="$ColorCurrent" ||
				current=''

			tags=()

			if [ -z "$no_tags" ]; then
				! git config "branch.$branchname.message-id-export" &>/dev/null ||
					tags+=("exported")

				! git config "branch.$branchname.message-id-sent" &>/dev/null ||
					tags+=("sent")
			fi

			printf '%1s %s..%s %7s %s%s%s\n' \
				"${current}${ColorDefault}${mark}" \
				"${ColorRange}${basecommit}" \
				"${objectname}${ColorDefault}" \
				"($(git rev-list --count "$basecommit..$objectname"))" \
				"${branchname}" \
				"${tags:+ ${ColorTag}[${tags[*]}]${ColorDefault}}" \
				"${ColorReset}"
		fi

		prev=("$@")
	}
	foreach_ref "patchset/${patchset[$P_NAME]}/${ver}[0-9]*" _
}

help_version()
{
	case "$1" in
		usage) printf 'version [--major|--minor] [<patchset>] [number]\n'
			;;
		descr) builtin_cat <<-EOF
			Creates branch for a new version of <patchset>. Branch will
			copy the description and recipient list.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  --major      increment major version number.
			  --minor      increment minor version number.
			  -h, --help   show this text and exit.
			EOF
			;;
	esac
}

cmd_version()
{
	local newname='' newver='' branchname='' inc=''

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help version
			return
		elif option_b '--minor --major' "$@"; then
			inc="${OPTNAME#--}"
		else
			break
		fi
		shift "$OPTSHIFT"
	done

	parse_refname patchset "${1-}"
	[ "$#" -eq 0 ] || shift

	if [ "$#" -gt 0 ]; then
		newver="${1#[av]}"
		shift
	fi

	[ "$#" -eq 0 ] ||
		fatal "too many arguments"

	if [ -z "$newver" ]; then
		newver="$(git for-each-ref --format='%(refname)' "refs/heads/patchset/${patchset[$P_NAME]}/" |
			sed -e 's/^.*\/[av]//' |
			sort --version-sort |
			tail -1)"
		newver="${newver:-1}"

		if [ -z "${newver##*.[0-9]*}" ]; then
			case "${inc:-minor}" in
				major) newver="$((${newver%%.*} + 1)).0" ;;
				minor) newver="${newver%.*}.$((${newver##*.} + 1))" ;;
			esac
		else
			case "${inc:-major}" in
				major) newver="$(($newver + 1))" ;;
				minor) newver="$(($newver + 1)).0" ;;
			esac
		fi
	fi

	newname="patchset/${patchset[$P_NAME]}/v$newver"

	! git rev-parse "$newname" >/dev/null 2>&1 ||
		fatal "$newname: branch already exists"

	git branch -c "${patchset[$P_FULL]}" "$newname" ||
		fatal "unable to copy 'patchset/${patchset[$P_NAME]}' branch"

	git switch "$newname" ||
		fatal "unable to switch to '$newname'"

	message "created a new version of patchset: $newname"
}

help_cover()
{
	case "$1" in
		usage) printf 'cover [-e|--edit] [--no-pager] [<patchset>]\n'
			;;
		descr) builtin_cat <<-EOF
			Shows or changes the description of the patchset. This description
			will be used for cover-letter.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  --no-pager   do not pipe git output into a pager.
			  -e, --edit   open editor to change the description.
			  -h, --help   show this text and exit.
			EOF
			;;
	esac
}

cmd_cover()
{
	local mode=list use_pager=1 pager=''
	local to cc args patchset commit

	to=(); cc=(); args=();

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help cover
			return
		elif option_b '-e --edit' "$@"; then
			mode=edit
		elif option_b '--no-pager' "$@"; then
			use_pager=
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}" "$@"

	parse_refname patchset "${1-}"
	[ "$#" -eq 0 ] || shift

	[ "$#" -eq 0 ] ||
		fatal "too many arguments"

	[ -n "${patchset[$P_NAME]}" ] && [ -n "${patchset[$P_VERS]}" ] ||
		fatal "unable to parse patchset"

	update_description_from_tag "${patchset[$P_FULL]}"

	case "$mode" in
		edit)
			git branch --edit-description "${patchset[$P_FULL]}"
			update_tag_from_description "${patchset[$P_FULL]}"
			;;
		list)
			if [ -n "$use_pager" ] && [ -t 1 ]; then
				get_pager pager
				describe_patchset "${patchset[$P_FULL]}" |$pager
			else
				describe_patchset "${patchset[$P_FULL]}"
			fi
			;;
	esac
}

help_log()
{
	case "$1" in
		usage) printf 'log [<patchset>] [options]\n'
			;;
		descr) builtin_cat <<-EOF
			Shortcut for git-log(1) to display patchset changes. The <options>
			will be passed to git-log(1). Without any options, the command will
			show changes in the current patchset.
			EOF
			;;
		options)
			;;
	esac
}

cmd_log()
{
	local basecommit patchset args
	args=()

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help log
			return
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}"

	if [ "$#" -gt 0 ] && [ -n "${1##-*}" ]; then
		parse_refname patchset "$1"
		shift
	else
		parse_refname patchset
	fi

	basecommit_for basecommit "${patchset[$P_HEAD]}" ||
		return 1

	git log "$basecommit..${patchset[$P_HEAD]}" "$@"
}

help_export()
{
	case "$1" in
		usage) printf 'export [--resend] [--rfc] [(-o|--output-directory) DIR] [<patchset>] [<options>]\n'
			;;
		descr) builtin_cat <<-EOF
			Prepares patches for e-mail submission. The <options> will be passed
			to git-format-patch(1).
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  --resend                      shortcut to add RESEND tag to the subject.
			  --rfc                         shortcut to add RFC tag to the subject.
			  -o, --output-directory DIR    use <DIR> to store the resulting files
			                                (default: patches/PATCHSET/)
			  -h, --help                    show this text and exit.
			EOF
			;;
	esac
}

cmd_export()
{
	local subject_prefix='' basecommit arg args patchset recipients ver
	local resend='' rfc='' outdir=''

	args=()

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help export
			return
		elif option_b '--resend' "$@"; then
			resend=RESEND
		elif option_b '--rfc' "$@"; then
			rfc=RFC
		elif option_s '-o --output-directory' "$@"; then
			outdir="$OPTVALUE"
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}" "$@"

	if [ "$#" != 0 ] && [ -n "${1##-*}" ]; then
		parse_refname patchset "$1"
		shift
	else
		parse_refname patchset
	fi

	[ -n "${patchset[$P_NAME]}" ] && [ -n "${patchset[$P_VERS]}" ] ||
		fatal "unable to parse patchset"

	args=()
	add_arg() { args+=("--$4=$3"); }

	recipients=()
	list_recipients add_arg to "patchset.to" "branch.${patchset[$P_FULL]}.to"
	list_recipients add_arg cc "patchset.cc" "branch.${patchset[$P_FULL]}.cc"
	set -- "$@" "${args[@]}"

	for arg in $resend $rfc $(get_subject_prefix "${patchset[$P_FULL]}") PATCH; do
		subject_prefix="${subject_prefix:+$subject_prefix }$arg"
	done
	set -- "$@" "--subject-prefix=$subject_prefix"

	basecommit_for basecommit "${patchset[$P_HEAD]}" ||
		return 1

	# git-format-patch: switch `v' expects a numerical value
	ver="${patchset[$P_VERS]:-1}"
	[ -n "${ver##*[!0-9]*}" ] || ver="${ver%%[!0-9]*}"

	outdir="${outdir:-patches/${patchset[$P_NAME]}/}"

	[ -d "$outdir" ] ||
		mkdir -p -- "$outdir"

	update_description_from_tag "${patchset[$P_FULL]}"

	git format-patch -v "$ver" --thread --minimal --cover-from-description=auto \
		-o "$outdir" \
		"$@" "$basecommit..${patchset[$P_HEAD]}"

	local msgid
	! msgid="$(set +f; get_thread_id_from_files "$outdir/v$ver"-000[01]-*.patch)" ||
		git config "branch.${patchset[$P_FULL]}.message-id-export" "$msgid"
}

help_send()
{
	case "$1" in
		usage) printf 'send [[<options>] <files|directory>]\n'
			;;
		descr) builtin_cat <<-EOF
			Sends patches by e-mail. The <options> will be passed
			to git-send-email(1). Without any options, the command
			will export current patchset itself.
			EOF
			;;
		options)
			;;
	esac
}

cmd_send()
{
	local args patchset ver msgid=''

	args=()

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help send
			return
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}"

	git --list-cmds=main |
		while read -r n; do [ "$n" != 'send-email' ] || exit 1; done &&
		fatal "git-send-email(1) not found" ||:

	if [ "$#" -eq 0 ]; then
		parse_refname patchset

		create_workdir

		if ! mkdir -- "$workdir/export" >/dev/null 2>&1; then
			workdir=
			fatal "another git-$PROGCMD-send(1) in progress"
		fi
		set -- "$workdir/export"

		cmd_export "${patchset[$P_FULL]}" -o "$1" >/dev/null

		ver="${patchset[$P_VERS]:-1}"
		[ -n "${ver##*[!0-9]*}" ] || ver="${ver%%[!0-9]*}"

		msgid="$(set +f; get_thread_id_from_files "$1/v$ver"-000[01]-*.patch)" ||:
	fi

	git send-email --to=' ' --confirm=always --format-patch --suppress-from "$@" ||
		fatal "sending the patchset failed."

	[ -z "$msgid" ] ||
		git config "branch.${patchset[$P_FULL]}.message-id-sent" "$msgid"
}

help_discussion()
{
	case "$1" in
		usage) printf 'discussion [--outdir=DIR] [<patchset>]\n'
			;;
		descr) builtin_cat <<-EOF
			Download a thread as an mbox file from a public-inbox server.
			This subcommand requires the b4(1) utility to work.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  -o, --outdir=DIR   output into this directory.
			  -h, --help         show this text and exit.
			EOF
			;;
	esac
}

cmd_discussion()
{
	local args outdir='' msgid=''

	args=()

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help discussion
			return
		elif option_s '-o --outdir' "$@"; then
			outdir="$OPTVALUE"
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}" "$@"

	type -p b4 >/dev/null ||
		fatal "the b4 utility is required to fetch mbox."

	parse_refname patchset "${1-}"
	[ "$#" -eq 0 ] || shift

	for n in "sent" "export"; do
		! msgid="$(git config "branch.${patchset[$P_FULL]}.message-id-$n" 2>/dev/null)" ||
			break
	done

	if [ -z "$msgid" ]; then
		message "The message-id of the sent/exported patchset is not known."
		message "It doesn't look like this patchset has been submitted."
		return 1
	fi

	b4 mbox ${output:+-o "$outdir"} "$@" "$msgid"
}

help_archive()
{
	case "$1" in
		usage) printf 'archive [--add|--restore] [<patchset>]\n'
			;;
		descr) builtin_cat <<-EOF
			Archive or unarchive the patchset. The specified version will be
			ignored. The archived patchset is not listed by default.
			EOF
			;;
		options) builtin_cat <<-EOF

			Options:
			  -a, --add       move all versions of patchset to archive.
			  -r, --restore   restore all versions of patchset.
			  -h, --help      show this text and exit.
			EOF
			;;
	esac
}

cmd_archive()
{
	local ver=l new='' args

	args=()

	while [ "$#" != 0 ]; do
		local OPTSHIFT='' OPTNAME='' OPTVALUE=''
		if [ "$1" = '--' ]; then
			shift
			break
		elif option_b '-h --help' "$@"; then
			cmd_help archive
			return
		elif option_b '-a --add' "$@"; then
			ver=v
		elif option_b '-r --restore' "$@"; then
			ver=a
		else
			args+=("$1")
			OPTSHIFT=1
		fi
		shift "$OPTSHIFT"
	done
	set -- "${args[@]}" "$@"

	case "$ver" in
		a) new=v ;;
		v) new=a ;;
		l)
			cmd_list --archive
			return
			;;
	esac

	parse_refname patchset "${1-}"
	[ "$#" -eq 0 ] || shift

	[ "$#" -eq 0 ] ||
		fatal "too many arguments"

	if [ -n "${patchset[$P_VERS]}" ]; then
		local word="archived"
		[ "$new" = a ] || word="restored"
		message "WARNING: You have specified the version number but the entire patchset will be $word"
	fi

	_()
	{
		local mark="$1" objectname="$2" branchname="$3" cur_patchset="$4"

		if [ -z "$branchname" ]; then
			[ -n "${found-}" ] ||
				message "patchset/${patchset[$P_NAME]}: patchset not found."
			return 0
		fi

		num="${branchname##*/[av]}"

		git branch -M "$branchname" "patchset/${patchset[$P_NAME]}/$new$num"

		message "patchset/${patchset[$P_NAME]}/$ver$num -> patchset/../$new$num"
		found=1
	}
	foreach_ref "patchset/${patchset[$P_NAME]}/${ver}[0-9]*" _
}

help_help()
{
	case "$1" in
		usage) printf 'help [<command>]\n'
			;;
		descr) builtin_cat <<-EOF
			Shows this message and exit.
			EOF
			;;
		options)
			;;
	esac
}

commands=()
readarray -t commands < <(sed -n -e 's/^help_\([^[:space:]]\+\)().*/\1/p' "$0")
help_()
{
	local n s
	case "$1" in
		usage) printf '[<command>] [<args>]\n'
			for n in "${commands[@]}"; do
				"help_$n" usage
			done
			;;
		descr) builtin_cat <<-EOF
			This is highlevel utility for easy patchset creation. Each patchset has
			a version and description.
			EOF
			;;
		options) builtin_cat <<-EOF

			Commands:

			EOF
			for n in "${commands[@]}"; do
				"help_$n" descr |
				while read -r s; do
					printf "%-12s%s\n" "$n" "$s"
					n=
				done
				printf '\n'
			done
			;;
	esac
}

cmd_help()
{
	local n cmd='' found=''

	if [ "$#" -gt 0 ]; then
		cmd="$1"

		for n in "${commands[@]}"; do
			[ "$n" != "$cmd" ] || found=1
		done

		[ -n "$found" ] ||
			fatal "unknown command: $cmd"
	fi

	local prefix='Usage:'
	"help_$cmd" usage |
	while IFS='' read -r options; do
		printf '%s git %s %s\n' "$prefix" "$PROGCMD" "$options"
		prefix='   or:'
	done
	builtin_cat <<-EOF

	$(
	"help_$cmd" descr
	"help_$cmd" options
	)

	Report bugs to authors.

	EOF
}

[ "$#" != 0 ] || set -- list --latest
cmd="$1"; shift

trap exit_handler EXIT
trap signal_handler HUP PIPE INT QUIT TERM

case "$cmd" in
	-h|help)	cmd_help	"$@"	;;
	ar|archive)	cmd_archive	"$@"	;;
	cr|create)	cmd_create	"$@"	;;
	di|discussion)	cmd_discussion	"$@"	;;
	ex|export)	cmd_export	"$@"	;;
	ls|list)	cmd_list	"$@"	;;
	rm|remove)	cmd_remove	"$@"	;;
	vr|version)	cmd_version	"$@"	;;
	config|cover|log|send)
			cmd_"$cmd"	"$@"	;;
	*)
		fatal "unknown command: $cmd"
		;;
esac


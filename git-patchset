#!/bin/bash -efu
# SPDX-License-Identifier: GPL-2.0

PROG="${0##*/}"
PROGCMD="${PROG#git-}"

[ -t 1 ] &&
	color=always ||
	color=none

message()
{
	printf >&2 '%s: %s\n' "$PROG" "$*"
}

fatal()
{
	message "$*"
	exit 1
}

parse_patchset()
{
	local __v='' __n="$1"

	__n="${__n#refs/}"
	__n="${__n#heads/}"

	[ -z "${__n##patchset/*}" ] ||
		fatal "branch is not a patchset: $1"
	shift

	eval "$1=\"\$__n\""
	shift

	[ "$#" != 0 ] || return 0

	[ -n "${__n##*/[av][0-9]*}" ] ||
		__v="${__n##*/[av]}"

	__n="${__n#patchset/}"
	__n="${__n%/[av]$__v}"

	eval "$1=\"\$__n\""
	shift

	[ "$#" != 0 ] || return 0

	eval "$1=\"\$__v\""
	shift
}

current_patchset()
{
	local __v
	__v="$(git branch --show-current --format='%(refname)')" ||
		fatal "unable to obtain current branch name"
	parse_patchset "$__v" "$@"
}

branch_exists()
{
	git rev-parse "$1" >/dev/null 2>&1 ||
		fatal "unknown branch: $1"
}

builtin_cat()
{
	local s eof=
	while [ -z "$eof" ]; do
		read -N 1 s || eof=1
		printf '%s' "$s"
	done
}

cmd_help()
{
	case "$__PATCHSET_HELP" in
		usage) printf '[<command>]\n'
			return ;;
		descr) printf '%s\n' \
			"Shows this message and exit."
			return ;;
		options)
			return ;;
	esac

	local n cmd= found=
	[ "$#" = 0 ] || cmd="$1"

	set -- create new list info export send archive help

	if [ -n "$cmd" ]; then
		for n in "$@"; do
			[ "$n" != "$cmd" ] || found=1
		done
		[ -n "$found" ] ||
			fatal "unknown command: $cmd"
		builtin_cat <<-EOF
		Usage: git $PROGCMD $cmd `__PATCHSET_HELP=usage "cmd_$cmd"`

		`
		__PATCHSET_HELP=descr   "cmd_$cmd"
		__PATCHSET_HELP=options "cmd_$cmd"
		`

		Report bugs to authors.

		EOF
		exit
	fi

	builtin_cat <<-EOF
	Usage: git $PROGCMD [<command>] [<args>]
	`for n in "$@"; do
		printf '   or: git %s %s ' "$PROGCMD" "$n"
		__PATCHSET_HELP=usage "cmd_$n"
	done`

	This is highlevel utility for easy patchset creation. Each patchset has
	a version and description.

	Commands:

	`for n in "$@"; do
		__PATCHSET_HELP=descr "cmd_$n" |
		while read -r s; do
			printf "%-10s%s\n" "$n" "$s"
			n=
		done
		printf '\n'
	done`

	Report bugs to authors.

	EOF
	exit
}

get_pager()
{
	local __get_pager
	__get_pager="$(git config --get patchset.pager)" ||
		__get_pager="$(git config --get core.pager)" ||
		__get_pager="less"
	eval "$1=\"\$__get_pager\""
}

show_field_list()
{
	local arr i n="$1"

	readarray -t arr <<< $(
		git config --get-all patchset.$2 ||:;
		git config --get-all branch.$branchname.$2 ||:;
	)

	for i in "${!arr[@]}"; do
		if [ -n "${arr[$i]}" ]; then
			printf "%-${#1}s %s" "$n" "${arr[$i]}"
			[ "$i" = "$(( ${#arr[@]} - 1 ))" ] ||
				printf ','
			printf '\n'
			n=
		fi
	done
}

basecommit_for()
{
	local merge
	if ! merge="$(git config "branch.$1.merge")"; then
		message "Use \`git branch -u <upstream> $1\` to set upstream for branch."
		fatal "not found upstream for branch: $1"
	fi
	git rev-parse --short "$merge"
}

cmd_list()
{
	case "$__PATCHSET_HELP" in
		usage) printf '[--all|--latest|--versions] [--archive]\n'
			return ;;
		descr) printf '%s\n' \
			"Shows a list of known patchsets. The current patchset will" \
			"be marked with an asterisk. The list also shows the base and" \
			"last commits as well as the number of commits."
			return ;;
		options) printf '%s\n' \
			"" \
			"Options:" \
			"  --all        show all versions of all patchsets." \
			"  --latest     show only latest versions of patchsets." \
			"  --versions   show all versions of current patchset." \
			"  --archive    show archived patchsets"
			return ;;
	esac

	local mode='' ver=v

	while [ "$#" != 0 ]; do
		case "$1" in
			--all|--latest|--versions)
				mode="${1#--}"
				;;
			--archive)
				mode="${mode:-latest}"
				ver=a
				;;
			*)
				break
				;;
		esac
		shift
	done

	mode="${mode:-all}"

	[ "$#" = 0 ] ||
		fatal "too many arguments"

	local ColorRange='' ColorReset='' ColorCurrent='' ColorDefault=''

	if [ "$color" = always ]; then
		ColorDefault="$(git config --get-color "" "white")"
		ColorCurrent="$(git config --get-color "" "bold")"
		ColorRange="$(  git config --get-color "" "yellow")"
		ColorReset="$(  git config --get-color "" "reset")"
	fi

	{
		name='*'
		[ "$mode" != 'versions' ] ||
			current_patchset _ name
		git for-each-ref \
			--format='%(if)%(HEAD)%(then)*%(else)-%(end) %(objectname:short) %(refname:lstrip=2)' \
			--sort=refname \
			"refs/heads/patchset/$name/$ver[0-9]*"
		printf '\n'
	} |
	while read -r on_mark on_objectname on_branchname; do
		on_patchset="${on_branchname%/$ver*}"

		while [ -n "${branchname-}" ]; do
			[ "$mode" = 'all' ] || [ "$mode" = 'versions' ] ||
				[ "${prev_patchset:-$on_patchset}" != "$on_patchset" ] ||
				break

			basecommit="$(basecommit_for "$branchname")"

			[ "$mark" = '*' ] &&
				current="$ColorCurrent" ||
				current=''

			printf '%1s %s..%s %7s %s%s\n' \
				"${current}${ColorDefault}${mark}" \
				"${ColorRange}${basecommit}" \
				"${objectname}${ColorDefault}" \
				"($(git rev-list --count "$basecommit..$objectname"))" \
				"${branchname}${ColorReset}"
			break
		done

		mark="$on_mark"
		objectname="$on_objectname"
		branchname="$on_branchname"
		prev_patchset="$on_patchset"
	done
}

cmd_create()
{
	case "$__PATCHSET_HELP" in
		usage) printf '<newname> [<start-point>]\n'
			return ;;
		descr) printf '%s\n' \
			"Creates branch for a new patchset. The new branch will be" \
			"created with v1 version. The new branch head will point to" \
			"<start-point> commit or to current commit."
			return ;;
		options)
			return ;;
	esac

	[ "$#" != 0 ] ||
		fatal "patchset name required"

	local branchname='' startpoint=''

	branchname="$1"
	shift

	if [ "$#" != 0 ]; then
		startpoint="$1"
		shift
	fi

	[ "$#" = 0 ] ||
		fatal "too many arguments"

	branchname="${branchname#/}"
	branchname="${branchname%/}"

	[ -n "$branchname" ] ||
		fatal "empty branch name is not allowed"

	git switch \
		--create "patchset/$branchname/v1" \
		--track ${startpoint:+"$startpoint"} ||
		fatal "unable to create new branch: patchset/$branchname/v1"

	git config \
		"branch.patchset/$branchname/v1.description" \
		"*** SUBJECT HERE ***

*** PATCHSET DESCRIPTION HERE ***

--
" ||
		fatal "unable to write empty description for patchset/$branchname/v1"

	git branch --edit-description "patchset/$branchname/v1" ||
		fatal "unable to change description"

	message "new patchset created: patchset/$branchname/v1"
}

cmd_new()
{
	case "$__PATCHSET_HELP" in
		usage) printf '[<patchset>] [number]\n'
			return ;;
		descr) printf '%s\n' \
			"Creates branch for a new version of <patchset>. Branch will" \
			"copy the description and recipient list."
			return ;;
		options)
			return ;;
	esac

	local newname='' newver='' branchname='' name='' ver=''

	if [ "$#" != 0 ]; then
		branch_exists "$1"
		branchname="$1"
		shift
	fi

	if [ "$#" != 0 ]; then
		newver="${1#[av]}"
		shift
	fi

	[ "$#" = 0 ] ||
		fatal "too many arguments"

	[ -n "$branchname" ] &&
		parse_patchset "$branchname" branchname name ver ||
		current_patchset branchname name ver

	if [ -z "$newver" ]; then
		newver="$(git for-each-ref --format='%(refname)' "refs/heads/patchset/$bname/" |
			sed -e 's/^.*\/[av]//' |
			sort -n |
			tail -1)"
		newver=$(($newver + 1))
	fi

	newname="patchset/$name/v$newver"

	! branch_exists "$newname" ||
		fatal "$newname: branch already exists"

	git branch -c "$branchname" "$newname" ||
		fatal "unable to copy '$branchname' branch"

	git switch "$newname" ||
		fatal "unable to switch to '$newname'"

	message "new patchset version created: $newname"
}

describe_patchset()
{
	local branchname basecommit subject_prefix

	branchname="$1"; shift
	basecommit="$(basecommit_for "$branchname")"

	subject_prefix="$(git config --get branch.$branchname.subject-prefix)" ||:
	subject_prefix="${subject_prefix:+$subject_prefix }PATCH"

	printf 'From %s %s\n' \
		"$(git config --get user.email)" \
		"$(LANG=C date -u)" ||:
	show_field_list To: to
	show_field_list Cc: cc
	printf 'Subject: [%s v%s 0/%s] %s\n\n' \
		"$subject_prefix" \
		"${branchname##*/[av]}" \
		"$(git rev-list --count "$basecommit..$branchname")" \
		"$(git config "branch.$branchname.description")"
	git rev-list --date-order --reverse --abbrev-commit --format=oneline \
		"$basecommit..$branchname"
}

cmd_info()
{
	case "$__PATCHSET_HELP" in
		usage) printf '[-e|--edit] [--no-pager] [--global] [--to=<email>] [--cc=<email>] [<patchset>]\n'
			return ;;
		descr) printf '%s\n' \
			"Shows or changes the description of the patchset. This description" \
			"will be used for cover-letter. You can always change or delete To" \
			"and Cc fields using the \`git config -e'."
			return ;;
		options) printf '%s\n' \
			"" \
			"Options:" \
			"  -e,--edit      open editor to change the description." \
			"  --to=<email>   add a To: header to the email headers." \
			"  --cc=<email>   add a Cc: header to the email headers." \
			"  --global       add <email> globally for all patchsets." \
			"  --no-pager     do not pipe git output into a pager."
			return ;;
	esac

	local branchname='' name='' ver='' mode=list use_pager=1 pager=''
	local to cc cfg_prefix=''

	to=(); cc=();

	while [ "$#" != 0 ]; do
		case "$1" in
			-e|--edit)
				mode=edit
				;;
			--no-pager)
				use_pager=
				;;
			--global)
				cfg_prefix="patchset"
				;;
			--to=*)
				to+=("${1#--to=}")
				mode=tocc
				;;
			--cc=*)
				cc+=("${1#--cc=}")
				mode=tocc
				;;
			--)
				shift
				break
				;;
			*)
				break
				;;
		esac
		shift
	done

	if [ "$#" != 0 ]; then
		branch_exists "$1"
		branchname="$1"
		shift
	fi

	[ "$#" = 0 ] ||
		fatal "too many arguments"

	[ -n "$branchname" ] &&
		parse_patchset "$branchname" branchname name ver ||
		current_patchset branchname name ver

	[ -n "$name" ] && [ -n "$ver" ] ||
		fatal "unable to parse patchset"

	if [ -n "$cfg_prefix" ]; then
		[ "$mode" != 'edit' ] ||
			fatal "options --edit and --global are mutually exclusive"
		[ "$mode" != 'list' ] ||
			fatal "option --global is useless for viewing the description"
	fi

	if [ "${#to[@]}" != 0 ] || [ "${#cc[@]}" != 0 ]; then
		local cc_nr=0 to_nr=0 arr

		arr=()
		readarray -t arr <<< $(
			git config --get-all patchset.to ||:;
			git config --get-all patchset.cc ||:;
		)
		if [ -z "$cfg_prefix" ]; then
			readarray -O "${#arr[@]}" -t arr <<< $(
				git config --get-all branch.$branchname.to ||:;
				git config --get-all branch.$branchname.cc ||:;
			)
			cfg_prefix="branch.$branchname"
		fi

		add_recipient()
		{
			local field counter a n
			field="$1"; shift
			counter="$1"; shift
			for a in "$@"; do
				for n in "${arr[@]}" ; do
					if [ "$n" = "$a" ]; then
						message "address already exists: $n"
						continue 2
					fi
				done
				git config --add "$cfg_prefix.$field" "$a"
				eval "$counter=\$((\$$counter + 1))"
			done
		}

		add_recipient to to_nr "${to[@]}"
		add_recipient cc cc_nr "${cc[@]}"
	fi

	case "$mode" in
		edit)
			git branch --edit-description "$branchname"
			;;
		list)
			if [ -n "$use_pager" ] && [ -t 1 ]; then
				get_pager pager
				describe_patchset "$branchname" |$pager
			else
				describe_patchset "$branchname"
			fi
			;;
		tocc)
			[ "${#to[@]}" = 0 ] || message "added $to_nr new addresses to \`To' list"
			[ "${#cc[@]}" = 0 ] || message "added $cc_nr new addresses to \`Cc' list"
			;;
	esac
}

cmd_export()
{
	case "$__PATCHSET_HELP" in
		usage) printf '[--resend] [--rfc] [<patchset>] [<options>]\n'
			return ;;
		descr) printf '%s\n' \
			"Prepares patches for e-mail submission. The <options> will be passed" \
			"to git-format-patch(1)."
			return ;;
		options) printf '%s\n' \
			"" \
			"Options:" \
			"  --resend  shortcut to add RESEND tag to the subject." \
			"  --rfc     shortcut to add RFC tag to the subject."
			return ;;
	esac

	local subject_prefix='' branchname='' basecommit name ver arr
	local resend='' rfc=''

	while [ "$#" != 0 ]; do
		case "$1" in
			--resend)
				resend=RESEND
				;;
			--rfc)
				rfc=RFC
				;;
			--)
				shift
				break
				;;
			*)
				break
				;;
		esac
		shift
	done

	if [ "$#" != 0 ]; then
		if [ -n "$1" ] && [ -z "${1##patchset/*}" ] && git rev-parse "$1" >/dev/null 2>&1; then
			branchname="$1"
			shift
		fi
	fi

	[ -n "$branchname" ] &&
		parse_patchset "$branchname" branchname name ver ||
		current_patchset branchname name ver

	[ -n "$name" ] && [ -n "$ver" ] ||
		fatal "unable to parse patchset"

	arr=()
	readarray -t arr <<< $(
		git config --get-all patchset.to ||:;
		git config --get-all branch.$branchname.to ||:;
	)
	for n in "${arr[@]}"; do
		[ -z "$n" ] ||
			set -- "$@" "--to=$n"
	done

	arr=()
	readarray -t arr <<< $(
		git config --get-all patchset.cc ||:;
		git config --get-all branch.$branchname.cc ||:;
	)
	for n in "${arr[@]}"; do
		[ -z "$n" ] ||
			set -- "$@" "--cc=$n"
	done

	arr=()
	readarray -t arr <<< $(
		echo $resend $rfc;
		git config --get branch.$branchname.subject-prefix ||:;
		echo PATCH;
	)
	for n in "${arr[@]}"; do
		[ -z "$n" ] ||
			subject_prefix="${subject_prefix:+$subject_prefix }$n"
	done

	set -- "$@" "--subject-prefix=$subject_prefix"

	basecommit="$(basecommit_for "$branchname")"

	git format-patch -v "$ver" --thread --minimal --cover-from-description=auto \
		"$@" "$basecommit..$branchname"
}

cmd_send()
{
	case "$__PATCHSET_HELP" in
		usage) printf '[[<options>] <files|directory>]\n'
			return ;;
		descr) printf '%s\n' \
			"Sends patches by e-mail. The <options> will be passed" \
			"to git-send-email(1). Without any options, the command" \
			"will export current patchset itself."
			return ;;
		options)
			return ;;
	esac

	local auto_export=''

	[ "$#" != 0 ] ||
		auto_export=1

	git --list-cmds=main |
		while read -r n; do [ "$n" != 'send-email' ] || exit 1; done &&
		fatal "git-send-email(1) not found" ||:

	if [ -n "$auto_export" ]; then
		local dir branchname
		current_patchset branchname

		dir="$(git rev-parse --absolute-git-dir; false)/$PROGCMD-send" ||
			fatal "unable to find git directory"
		set -- "$dir"

		if ! mkdir -- "$1" >/dev/null 2>&1; then
			[ -d "$1" ] ||
				fatal "unable to create temporary directory: $1"
			fatal "another git-$PROGCMD-send(1) in progress"
		fi

		cmd_export "$branchname" -o "$1" >/dev/null
	fi

	local rc=0
	git send-email --to=' ' --confirm=always --format-patch --suppress-from \
		"$@" || rc=$?

	[ -z "$auto_export" ] ||
		rm -rf -- "$1" ||:

	return $rc
}

cmd_archive()
{
	case "$__PATCHSET_HELP" in
		usage) printf '[--add|--restore] [<patchset>]\n'
			return ;;
		descr) printf '%s\n' \
			"Archive or unarchive the patchset. The specified version will be "\
			"ignored. The archived patchset is not listed by default."
			return ;;
		options) printf '%s\n' \
			"" \
			"Options:" \
			"  -a, --add       Move all versions of patchset to archive." \
			"  -r, --restore   Restore all versions of patchset."
			return ;;
	esac

	local ver=v new='' branchname=''

	while [ "$#" != 0 ]; do
		case "$1" in
			-a|--add)
				ver=v
				;;
			-r|--restore)
				ver=a
				;;
			--)
				shift
				break
				;;
			*)
				break
				;;
		esac
		shift
	done

	case "$ver" in
		a) new=v ;;
		v) new=a ;;
	esac

	if [ "$#" != 0 ]; then
		branchname="$1"
		shift
	fi

	[ "$#" = 0 ] ||
		fatal "too many arguments"

	[ -n "$branchname" ] &&
		parse_patchset "$branchname" branchname bname bver ||
		current_patchset branchname bname bver

	[ -z "$bver" ] ||
		message "WARNING: You have specified the version number but the entire patchset will be archived"

	git for-each-ref --format='%(refname:lstrip=2)' \
		"refs/heads/patchset/$bname/$ver[0-9]*" |
	while :; do
		read -r name ||:

		if [ -z "$name" ]; then
			[ -n "${found-}" ] ||
				message "patchset/$bname: patchset not found."
			break
		fi

		parse_patchset "$name" _ _ num

		git branch -M "$name" "patchset/$bname/$new$num"

		message "patchset/$bname/$ver$num -> patchset/../$new$num"
		found=1
	done
}

[ "$#" != 0 ] || set -- list --latest
cmd="$1"; shift

__PATCHSET_HELP=

case "$cmd" in
	-h|help)   cmd_help "$@"      ;;
	cr|create) cmd_create "$@"    ;;
	ex|export) cmd_export "$@"    ;;
	ls|list)   cmd_list "$@"      ;;
	info|cover|cover-letter)
	           cmd_info "$@"      ;;
	new)       cmd_new "$@"       ;;
	send)      cmd_send "$@"      ;;
	archive)   cmd_archive "$@"   ;;
	*)
		fatal "unknown command: $cmd"
		;;
esac
